services:
  backend:
    profiles: [prod]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_service
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://sa:database123!@db:5432/uberfake
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  backend.dev:
    profiles: [dev]
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend_service.dev
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://sa:database123!@db:5432/uberfake
    develop:
      watch:
        - action: sync
          path: ./backend/
          target: /app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    profiles: [prod]
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_service
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network

  frontend.dev:
    profiles: [dev]
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend_service.dev
    ports:
      - "3000:3000"
    develop:
      watch:
        - action: sync
          path: ./frontend/
          target: /app
    depends_on:
      - backend.dev
    networks:
      - app-network

  db:
    image: postgres
    container_name: postgres_service
    environment:
      POSTGRES_USER: sa
      POSTGRES_PASSWORD: database123!
      POSTGRES_DB: uberfake
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sa -d uberfake"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  db-volume:
